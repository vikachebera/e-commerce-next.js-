generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String?    @unique
  emailVerified DateTime?
  password      String?
  role          Role       @default(USER)
  name          String?
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  cartItems     CartItem[]
  orders        Order[]
  Account       Account[]
  Session       Session[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  imageUrl    String?     @map("image_url")
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now()) @map("created_at")
  orderDate  DateTime    @default(now()) @map("order_date")
  orderItems OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float

  @@map("order_items")
}
